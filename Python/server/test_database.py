from utils.database import KVStore
import json

def test_database():
    # CrÃ©er une instance de la base de donnÃ©es
    print("ğŸ”µ CrÃ©ation de la base de donnÃ©es...")
    db = KVStore("test_store.db")

    # Test 1: Ajouter des donnÃ©es
    print("\nğŸ”µ Test 1: Ajout de donnÃ©es")
    user1 = {
        "name": "Alice",
        "age": 30,
        "preferences": ["python", "data science"]
    }
    db.put("user:1", user1)
    print(f"âœ… AjoutÃ©: {json.dumps(user1, indent=2)}")

    # Test 2: Lire des donnÃ©es
    print("\nğŸ”µ Test 2: Lecture de donnÃ©es")
    retrieved = db.get("user:1")
    print(f"âœ… Lu: {json.dumps(retrieved, indent=2)}")

    # Test 3: VÃ©rifier l'existence
    print("\nğŸ”µ Test 3: VÃ©rification d'existence")
    exists = db.exists("user:1")
    print(f"âœ… user:1 existe? {exists}")
    print(f"âœ… user:2 existe? {db.exists('user:2')}")

    # Test 4: Upsert avec vÃ©rification
    print("\nğŸ”µ Test 4: Upsert avec vÃ©rification")
    # Premier essai - nouvelle clÃ©
    exists, value = db.upsert_with_check("user:2", {"name": "Bob", "age": 25})
    print(f"âœ… Premier essai - Existait dÃ©jÃ ? {exists}")
    print(f"âœ… Valeur: {json.dumps(value, indent=2)}")
    
    # DeuxiÃ¨me essai - clÃ© existante
    exists, value = db.upsert_with_check("user:2", {"name": "Charlie", "age": 35})
    print(f"âœ… DeuxiÃ¨me essai - Existait dÃ©jÃ ? {exists}")
    print(f"âœ… Valeur: {json.dumps(value, indent=2)}")

    # Test 5: Lecture rÃ©pÃ©tÃ©e de la mÃªme donnÃ©e
    print("\nğŸ”µ Test 5: Lectures multiples de la mÃªme donnÃ©e")
    test_data = {
        "name": "Eve",
        "score": 95,
        "tags": ["astronomy", "exoplanets"],
        "metadata": {
            "created_at": "2025-10-05",
            "version": "1.0"
        }
    }
    
    # Stocker la donnÃ©e
    print("âœ… Stockage de la donnÃ©e de test...")
    db.put("test:persistent", test_data)
    
    # Lire la mÃªme donnÃ©e plusieurs fois
    print("âœ… PremiÃ¨re lecture:")
    first_read = db.get("test:persistent")
    print(json.dumps(first_read, indent=2))
    
    print("\nâœ… DeuxiÃ¨me lecture:")
    second_read = db.get("test:persistent")
    print(json.dumps(second_read, indent=2))
    
    print(f"\nâœ… Les deux lectures sont identiques? {first_read == second_read}")
    
    # Test 6: Lister les clÃ©s
    print("\nğŸ”µ Test 6: Liste des clÃ©s")
    keys = db.keys()
    print(f"âœ… ClÃ©s dans la base: {keys}")

    # Test 7: Supprimer une entrÃ©e
    print("\nğŸ”µ Test 6: Suppression")
    deleted = db.delete("user:1")
    print(f"âœ… user:1 supprimÃ©? {deleted}")
    print(f"âœ… Nouvelle liste des clÃ©s: {db.keys()}")

    # Fermer proprement
    db.close()
    print("\nâœ… Tests terminÃ©s!")

if __name__ == "__main__":
    test_database()