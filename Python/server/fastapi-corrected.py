import shutil
import pathlib
import logging
import zipfile
import uvicorn
import io


from fastapi import FastAPI, HTTPException, Query, UploadFile, File
from pydantic import BaseModel, Field
from typing import List, Optional
from utils.STARPredict import predict_rows
from utils.utils_json import convert, output_json
from utils.database import KVStore
from fastapi.responses import Response


# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# CrÃ©er l'application FastAPI
app = FastAPI(
    title="API ModÃ¨le IA",
    description="API pour communiquer avec un modÃ¨le d'intelligence artificielle",
    version="1.0.0"
)


# Charger la database
db = KVStore("store.db")


# Ensure uploads directory exists
BASE_DIR = pathlib.Path(__file__).resolve().parent
UPLOAD_DIR = BASE_DIR / "uploads"
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

# ðŸ”§ AJOUT: Configuration de sÃ©curitÃ©
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100 MB
ALLOWED_EXTENSIONS = {".pkl", ".json", ".csv", ".txt", ".h5", ".pt", ".pth"}


# DÃ©finir la structure des donnÃ©es d'entrÃ©e avec validation
class DonneesEntree(BaseModel):
    features: List[float] = Field(..., min_items=4, max_items=4)
    user_id: str = Field(default="anonyme")
    
    class Config:
        json_schema_extra = {
            "example": {
                "features": [5.1, 3.5, 1.4, 0.2],
                "user_id": "utilisateur_123"
            }
        }


# DÃ©finir la structure des donnÃ©es de sortie
class ReponseIA(BaseModel):
    data : list[dict]


# ðŸ”§ AJOUT: Fonction de validation sÃ©curisÃ©e des chemins
def validate_folder_path(ia_folder: str) -> pathlib.Path:
    """Valide et sÃ©curise le chemin du dossier IA contre les attaques path traversal."""
    # EmpÃªcher path traversal
    if ".." in ia_folder or ia_folder.startswith("/") or ia_folder.startswith("\\"):
        raise HTTPException(status_code=400, detail="Chemin invalide")
    
    # Construire le chemin sÃ©curisÃ©
    base_data_dir = BASE_DIR / "utils" / "Data"
    safe_path = base_data_dir / ia_folder
    
    # VÃ©rifier que le chemin rÃ©solu reste dans la zone autorisÃ©e
    try:
        resolved_path = safe_path.resolve()
        resolved_base = base_data_dir.resolve()
        
        if resolved_base not in resolved_path.parents and resolved_path != resolved_base:
            raise HTTPException(status_code=403, detail="AccÃ¨s interdit")
    except (OSError, RuntimeError) as e:
        raise HTTPException(status_code=400, detail=f"Erreur de chemin: {str(e)}")
    
    return resolved_path


# ðŸ”§ AJOUT: Fonction de validation des fichiers
def validate_file(file: UploadFile) -> None:
    """Valide le fichier uploadÃ© (extension, nom, etc.)."""
    if not file.filename:
        raise HTTPException(status_code=400, detail="Nom de fichier manquant")
    
    # VÃ©rifier l'extension
    file_ext = pathlib.Path(file.filename).suffix.lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise HTTPException(
            status_code=400,
            detail=f"Extension non autorisÃ©e: {file_ext}. AutorisÃ©es: {', '.join(ALLOWED_EXTENSIONS)}"
        )
    
    # EmpÃªcher path traversal dans le nom de fichier
    if ".." in file.filename or "/" in file.filename or "\\" in file.filename:
        raise HTTPException(status_code=400, detail="Nom de fichier invalide")


# Endpoint de santÃ© pour vÃ©rifier que l'API fonctionne
@app.get("/")
async def root():
    return {
        "message": "API ModÃ¨le IA opÃ©rationnelle",
        "version": "1.0.0",
        "endpoints": ["/predict", "/health"]
    }


@app.get("/health")
async def health_check():
    return {"status": "healthy", "model_loaded": "None"}


# Endpoint principal: reÃ§oit JSON, fait tourner l'IA, renvoie JSON
@app.post("/predict", response_model=ReponseIA)
async def predire(donnees: DonneesEntree):
    """
    Endpoint qui:
    1. ReÃ§oit les donnÃ©es JSON via l'API
    2. Fait tourner le modÃ¨le IA
    3. Renvoie la prÃ©diction en JSON
    """
    try:
        logger.info(f"RequÃªte reÃ§ue de {donnees.user_id}")

        # 1) Convertir les features -> (rows, hash_list, name_list)
        data = convert(donnees.features)
        rows, hash_list, name_list = data[0], data[1], data[2]

        # 2) Interroger la DB : sÃ©parer connus / inconnus
        known_vals, unknown_hashes = db.split_with_data(hash_list)

        if unknown_hashes:
            # 3) Construire les lignes Ã  prÃ©dire alignÃ©es Ã  unknown_hashes (ordre & doublons)
            idx_by_hash = {}
            for i, h in enumerate(hash_list):
                idx_by_hash.setdefault(h, []).append(i)

            unknown_rows = []
            for h in unknown_hashes:
                i = idx_by_hash[h].pop(0)
                unknown_rows.append(rows[i])

            # ðŸ”§ CORRECTION: Activer la prÃ©diction IA rÃ©elle
            new_values = predict_rows(unknown_rows)  # Ã‰TAIT: "UwU :3"

            # 5) Insert-only en DB (ne remplace jamais l'existant)
            insert_map = {}
            for h, val in zip(unknown_hashes, new_values):
                if h not in insert_map:  # si hash rÃ©pÃ©tÃ©, garder la 1re valeur prÃ©dite
                    insert_map[h] = val
            db.insert_new_many(insert_map)

            # 6) Relecture DB pour obtenir toutes les valeurs alignÃ©es Ã  hash_list
            final_vals, still_unknown = db.split_with_data(hash_list)
            if still_unknown:
                logger.warning(f"Encore inconnus aprÃ¨s insertion: {still_unknown}")
            resultat_ia = final_vals
        else:
            # Tout Ã©tait dÃ©jÃ  en cache
            resultat_ia = known_vals

        logger.info(f"PrÃ©diction effectuÃ©e: {resultat_ia}")

        # 7) RÃ©ponse JSON finale (valeurs alignÃ©es Ã  hash_list)
        return {"data": output_json(data_output=resultat_ia, list_hash=hash_list, list_name=name_list)}

    except Exception as e:
        logger.error(f"Erreur lors de la prÃ©diction: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors du traitement: {str(e)}"
        )


# ----------------------
# File upload / download
# ----------------------


# Endpoint pour importer 3 fichiers dans un dossier IA spÃ©cifique
@app.post("/import_ia_files")
async def import_ia_files(
    files: List[UploadFile] = File(...),
    ia_folder: str = "AI/STAR_AI_v2",
    user_id: str = "anon"
):
    """
    Importe exactement 3 fichiers dans un dossier IA spÃ©cifique.
    Les fichiers sont stockÃ©s dans: utils/Data/{ia_folder}/
    """
    if len(files) != 3:
        raise HTTPException(
            status_code=400,
            detail=f"Exactement 3 fichiers requis, {len(files)} reÃ§us"
        )
    
    # ðŸ”§ CORRECTION: Utiliser la validation sÃ©curisÃ©e
    dest_path = validate_folder_path(ia_folder)  # Ã‰TAIT: BASE_DIR / "utils" / "Data" / ia_folder
    dest_path.mkdir(parents=True, exist_ok=True)
    
    result = {"imported": [], "failures": [], "destination": str(dest_path)}
    
    for file in files:
        try:
            # ðŸ”§ AJOUT: Validation du fichier
            validate_file(file)
            
            dest_file = dest_path / file.filename
            
            # ðŸ”§ AMÃ‰LIORATION: Lecture par chunks avec limitation de taille
            file_size = 0
            with dest_file.open("wb") as buffer:
                while chunk := await file.read(8192):  # 8KB chunks
                    file_size += len(chunk)
                    if file_size > MAX_FILE_SIZE:
                        dest_file.unlink(missing_ok=True)  # Supprimer fichier partiel
                        raise HTTPException(
                            status_code=413,
                            detail=f"Fichier trop volumineux: {file.filename}"
                        )
                    buffer.write(chunk)
            
            result["imported"].append({
                "filename": file.filename,
                "size": dest_file.stat().st_size,
                "path": str(dest_file)
            })
            logger.info(f"âœ“ ImportÃ© dans {ia_folder}: {file.filename} ({file_size} bytes) par {user_id}")
            
        except HTTPException:
            raise
        except Exception as e:
            result["failures"].append({
                "filename": file.filename,
                "error": str(e)
            })
            logger.error(f"âœ— Ã‰chec import {file.filename}: {str(e)}")
        finally:
            await file.close()
    
    # ðŸ”§ AJOUT: VÃ©rifier si tous les imports ont Ã©chouÃ©
    if len(result["failures"]) > 0 and len(result["imported"]) == 0:
        raise HTTPException(
            status_code=500,
            detail=f"Tous les imports ont Ã©chouÃ©: {result['failures']}"
        )
    
    return {
        "status": "completed",
        "ia_folder": ia_folder,
        "user_id": user_id,
        "imported_count": len(result["imported"]),
        "details": result
    }


# Endpoint pour exporter TOUS les fichiers depuis un dossier IA
@app.get("/export_ia_files/{ia_folder:path}")  # ðŸ”§ AJOUT: :path pour supporter les slashes
async def export_ia_files(
    ia_folder: str,
    file_names: Optional[List[str]] = Query(None)
):
    """
    Exporte tous les fichiers depuis un dossier IA spÃ©cifique dans un ZIP.
    
    - Si file_names est fourni: exporte uniquement ces fichiers
    - Si file_names est vide/None: exporte TOUS les fichiers du dossier
    
    Exemples:
        GET /export_ia_files/STAR_AI_v2  (exporte TOUS les fichiers)
        GET /export_ia_files/STAR_AI_v2?file_names=file1.pkl&file_names=file2.pkl  (fichiers spÃ©cifiques)
    """

    # ðŸ”§ CORRECTION: Utiliser la validation sÃ©curisÃ©e
    source_path = validate_folder_path(ia_folder)  # Ã‰TAIT: "utils" / "Data" / ia_folder
    
    if not source_path.exists():
        raise HTTPException(
            status_code=404,
            detail="Dossier IA introuvable"  # ðŸ”§ CORRECTION: Moins d'infos pour la sÃ©curitÃ©
        )
    
    # Si aucun fichier spÃ©cifiÃ©, prendre TOUS les fichiers
    if file_names is None or len(file_names) == 0:
        all_files = [f.name for f in source_path.iterdir() if f.is_file()]
        file_names = all_files
        logger.info(f"Export de tous les fichiers ({len(file_names)})")  # ðŸ”§ CORRECTION: Moins d'infos
    else:
        # ðŸ”§ AJOUT: Valider chaque nom de fichier
        for fname in file_names:
            if ".." in fname or "/" in fname or "\\" in fname:
                raise HTTPException(status_code=400, detail=f"Nom de fichier invalide: {fname}")
    
    if len(file_names) == 0:
        raise HTTPException(
            status_code=404,
            detail="Aucun fichier trouvÃ© dans le dossier"
        )
    
    zip_buffer = io.BytesIO()
    
    try:
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            files_added = 0
            
            for file_name in file_names:
                file_path = source_path / file_name
                
                # ðŸ”§ AJOUT: VÃ©rification de sÃ©curitÃ© supplÃ©mentaire
                try:
                    resolved_file = file_path.resolve()
                    if source_path.resolve() not in resolved_file.parents:
                        logger.warning(f"âœ— Tentative d'accÃ¨s hors dossier: {file_name}")
                        continue
                except (OSError, RuntimeError):
                    logger.warning(f"âœ— Erreur rÃ©solution chemin: {file_name}")
                    continue
                
                if file_path.exists() and file_path.is_file():
                    # ðŸ”§ CORRECTION: Nom simple dans le ZIP (pas de chemin complet)
                    arcname = file_name  # Ã‰TAIT: f"{ia_folder}/{file_name}"
                    zip_file.write(file_path, arcname=arcname)
                    files_added += 1
                    logger.info(f"âœ“ AjoutÃ© au ZIP: {file_name}")
                else:
                    logger.warning(f"âœ— Fichier introuvable: {file_name}")
            
            if files_added == 0:
                raise HTTPException(
                    status_code=404,
                    detail="Aucun des fichiers spÃ©cifiÃ©s n'a Ã©tÃ© trouvÃ©"
                )
        
        zip_buffer.seek(0)
        
        # ðŸ”§ CORRECTION: Nettoyer le nom pour Ã©viter les caractÃ¨res dangereux
        safe_folder_name = ia_folder.replace("/", "_").replace("\\", "_")
        headers = {
            "Content-Disposition": f"attachment; filename={safe_folder_name}_export.zip"
        }
        
        logger.info(f"Export rÃ©ussi: {files_added} fichiers")
        
        return Response(
            zip_buffer.getvalue(),
            headers=headers,
            media_type="application/zip"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur lors de l'export: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="Erreur lors de l'export"  # ðŸ”§ CORRECTION: Message d'erreur gÃ©nÃ©rique
        )
    finally:
        zip_buffer.close()


# Lancer le serveur
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)